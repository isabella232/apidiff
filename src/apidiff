#!/bin/bash -e
#
# Copyright 2016-present The Material Motion Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

usage() {
  echo "apidiff <old git ref> <new git ref> <engine> <engine args...>"
  echo
  echo "Engine-specific invocations:"
  echo
  echo "    apidiff <old git ref> <new git ref> objc <umbrella header>"
  echo "    apidiff <old git ref> <new git ref> swift <workspace path> <module name>"
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
ROOT=$(cd "$DIR/.." && pwd)

OLD_COMMIT="$1"
NEW_COMMIT="$2"
ENGINE="$3"

if [[ -z "$OLD_COMMIT" || -z "$NEW_COMMIT" || -z "$ENGINE" ]]; then
  usage
  exit 1
fi

OLD_REF=$(git rev-list -n 1 "$OLD_COMMIT" -- 2> /dev/null || echo "")
if [ -z "$OLD_REF" ]; then
  echo "$OLD_COMMIT is not a known ref."
  exit 1
fi

NEW_REF=$(git rev-list -n 1 "$NEW_COMMIT" -- 2> /dev/null || echo "")
if [ -z "$NEW_REF" ]; then
  echo "$NEW_COMMIT is not a known ref."
  exit 1
fi

TMP_PATH=$(mktemp -d)
ERROR_LOG="$TMP_PATH/error.log"
OLD_PATH="$TMP_PATH/old"
NEW_PATH="$TMP_PATH/new"

GIT_ROOT="$(git rev-parse --show-toplevel | tail -n1)"

make_clones() {
  git clone "$GIT_ROOT" "$OLD_PATH" -q 2>> "$ERROR_LOG" || { echo "ERROR: Failed to clone."; exit 1; }
  pushd "$OLD_PATH" >> /dev/null
  git fetch -q || { echo "ERROR: Failed to update repo."; exit 1; }
  git checkout "$OLD_REF" -q
  popd >> /dev/null

  git clone "$GIT_ROOT" "$NEW_PATH" -q 2>> "$ERROR_LOG" || { echo "ERROR: Failed to clone."; exit 1; }
  pushd "$NEW_PATH" >> /dev/null
  git fetch -q || { echo "ERROR: Failed to update repo."; exit 1; }
  git checkout "$NEW_REF" -q
  popd >> /dev/null
}

clean_clones() {
  rm -rf "$OLD_PATH"
  rm -rf "$NEW_PATH"
}

make_clones

echo "Auto-generated by running:"
echo
echo "    apidiff $@"
echo

"$DIR/pathapidiff" "$OLD_PATH" "$NEW_PATH" "$ENGINE" "${@:4}"

clean_clones
